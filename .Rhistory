dbinom(2, 5, 0.5)
plot(0:5, dbinom(0:5, 5, 0.5), type = 'h', ylim = c(0, 0.5), lwd = 3)
lines(c(2,2), c(0, dim(2, 5, 0.5)), col = 'red1', lwd = 5)
lines(c(2,2), c(0, dbinom(2, 5, 0.5)), col = 'red1', lwd = 5)
#Task 1c: either 2 or 3 girls
Task = dbinom(2, 5, 0.5) + dbinom(3, 5, 0.5)
Task
#Task 1c: either 2 or 3 girls
Task = dbinom(2:3, 5, 0.5)
Task
#Task 1c: either 2 or 3 girls
Task = dbinom(2:3, 5, 0.5)  + dbinom(3, 5, 0.5)
Task
plot(0:5, dbinom(0:5, 5, 0.5), type = 'h', ylim = c(0, 0.5), lwd = 3)
lines(c(2,2), c(0, dbinom(2:3, 5, 0.5)), col = 'red1', lwd = 5)
#Task 1c: either 2 or 3 girls
Task = dbinom(2, 5, 0.5)  + dbinom(3, 5, 0.5)
Task
plot(0:5, dbinom(0:5, 5, 0.5), type = 'h', ylim = c(0, 0.5), lwd = 3)
lines(c(2,2), c(0, dbinom(2, 5, 0.5)), col = 'red1', lwd = 5)
lines(c(3,3), c(0, dbinom(3, 5, 0.5)), col = 'red1', lwd = 5)
#Task 2.1
obesityData <- read.csv("obesity_data.csv", head = TRUE)
obesityData
attach(obesityData)
?par
par(mfrow = c(1, 2))
?qqnorm
qqnorm(drug_WL, main = "Weight loss with drug")
qqnorm(drug_WL, main = "Weight loss with drug")
#   Add the QQ line
?qqline
qqline(drug_WL)
#   QQ Plot
qqnorm(placebo_WL, main = "weight loss with placebo")
#Task 2.1
obesityData <- read.csv("obesity_data.csv", head = TRUE)
#Task 2.1
obesityData <- read.csv("obesity_data.csv", head = TRUE)
obesityData
attach(obesityData)
qqnorm(drug_WL, main = "Weight loss with drug")
## Visually test the normality of drug_WL and placebo_WL
#   QQ Plot
par(mfrow = c(1, 3))
qqnorm(drug_WL, main = "Weight loss with drug")
qqnorm(drug_WL, main = "Weight loss with drug")
par(mfrow = c(1, 2)) #allow more than one graph to be displayed on one screen
qqnorm(drug_WL, main = "Weight loss with drug")
qqline(drug_WL)
#   QQ Plot
qqnorm(placebo_WL, main = "weight loss with placebo")
#   Add the QQ line
qqline(placebo_WL)
# Kolmogorov-Smirnov test
ks.test(drug_WL,"pnorm", mean = mean(drug_WL), sd = sd(drug_WL))
## Warning in ks.test(drug_WL, "pnorm", mean = mean(drug_WL), sd =
## sd(drug_WL)): ties should not be present for the Kolmogorov-Smirnov test
##
##  One-sample Kolmogorov-Smirnov test
##
## data:  drug_WL
## D = 0.1863, p-value = 0.7162
## alternative hypothesis: two-sided
ks.test(placebo_WL,"pnorm", mean = mean(placebo_WL), sd = sd(placebo_WL))
##
##  One-sample Kolmogorov-Smirnov test
##
## data:  placebo_WL
## D = 0.1218, p-value = 0.9856
## alternative hypothesis: two-sided
#
## T test
#
t.test(drug_WL,placebo_WL,paired = TRUE)
##  Paired t-test
##
## data:  drug_WL and placebo_WL
## t = 3.8202, df = 13, p-value = 0.002124
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  0.4282818 1.5431468
## sample estimates:
## mean of the differences
##               0.9857143
detach(obesity_data)
##  Paired t-test
##
## data:  drug_WL and placebo_WL
## t = 3.8202, df = 13, p-value = 0.002124
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  0.4282818 1.5431468
## sample estimates:
## mean of the differences
##               0.9857143
detach(obesityData)
obesityData$diff <- obesityData$drug_WL - obesityData$placebo_WL
obesityData
qqnorm(diff, main = "Difference btw drug and place")
qqnorm(obesityData$diff, main = "Difference btw drug and place")
qqline(obesityData$diff)
#ks.test(obesityData$diff,"pnorm", mean = mean(placebo_WL), sd = sd(placebo_WL))
t.test(obesityData$diff)
#Task1.3
b <- sample(1:1000, size = 10000, replace = TRUE)
hist(b)
par(mfrow = c(1, 1))
hist(b)
c <- sample(1:1000, size = 10000, replace = TRUE)
d <- b + c
hist(d)
e <- sample(1:1000, size = 10000, replace = TRUE)
f <- sample(1:1000, size = 10000, replace = TRUE)
a <- sample(1:1000, size = 10000, replace = TRUE)
q <- a + e + f +b +c
hist(q)
#Task2.2
ab <- sample(x, size = 15, mean = 12, sd = 2)
#Task2.2
ab <- pnorm(15, mean = 12, sd = 2)
ks.test(ab,"pnorm", mean = 12, sd = 2)
#Task2.2
ab <- pnorm(15, mean = 10, sd = 2)
ks.test(ab,"pnorm", mean = 10, sd = 2)
t.test(ab)
t.test(ab, "pnorm")
#Task2.3
endorphin_data <- read.csv("endorphin_concentration.csv", header = TRUE)
endorphin_data
attach(endorphin_data)
par(mfrow = c(1, 2))
qqnorm(Joggers, main = "Joggers")
qqline(Joggers)
qqnorm(New_entrants, main = "New Entrants")
qqline(New_entrants)
ks.test(Joggers, "pnorm", mean = mean(Joggers), sd = sd(Joggers))
ks.test(Joggers, "pnorm", mean = mean(Joggers, na.rm = TRUE), sd = sd(Joggers, na.rm = TRUE))
ks.test(New_entrants, "pnorm", mean = mean(New_entrants), sd = sd(New_entrants))
t.test(Joggers, New_entrants, paired = TRUE)
t.test(Joggers, New_entrants, paired = FALSE)
detach(endorphin_data)
install.packages("BSDA")
install.packages("e1071")
library(BSDA)
library(BSDA)
library(e1071)
obesity_data <- read.csv("obesity_data.csv", header = TRUE)
attach(obesity_data)
obesity_data
diff <- drug_HR - placebo_HR
SIGN.test(diff, md = 0, alternative = "two.sided")
SIGN.test(diff, md = 0, alternative = "less")
SIGN.test(diff, md=o, alternative = "greater")
SIGN.test(diff, md=0, alternative = "greater")
#Task 3
wilcox.test(diff, md = 0, alternative = "two.sided")
wilcox.test(diff, md = 0, alternative = "less")
wilcox.test(diff, md = 0, alternative = "greater")
detach(obesity_data)
obesity_data
obesity_data$diff
diff
#Task 3
diff2 <- drug_WL - placebo_WL
attach(obesity_data)
#Task 3
diff2 <- drug_WL - placebo_WL
diff2
order(diff)
wilcox.test(diff2, md = 0, alternative = "two.sided")
wilcox.test(diff2, md = 0, alternative = "less")
wilcox.test(diff2, md = 0, alternative = "greater")
diff2
sort(diff2)
order(diff2)
rank(diff2)
install.packages(c("cachem", "data.table", "dbplyr", "dtplyr", "fansi", "fastmap", "fs", "ggplot2", "httr", "lubridate", "Rcpp", "readr", "readxl", "tidyverse", "utf8", "vroom", "xfun"))
fasting <- read.csv("fasting_data.csv", header = TRUE)
attach(fasting)
fasting
plot(Blood_glucose, Peptide_58)
fasting
plot(Blood_glucose, Peptide_58)
cor(Blood_glucose, Peptide_58)
cor.test(Blood_glucose, Peptide_58)
cor(Blood_glucose, Peptide_58, method = "spearman")
cor.test(Blood_glucose, Peptide_58, method = "spearman")
detach(fasting)
car <- read.table("cars")
cars
plot("speed", "dist")
attach(cars)
plot("speed", "dist")
plot(speed, dist)
cars$ZScore <- (speed - mean(speed))/sd(speed)
cars
cars$Speed_ZScore <- (speed - mean(speed))/sd(speed)
cars
cars(-ZScore)
cars <- subset(cars, -c(ZScore))
cars <- subset(cars, select = -c(ZScore))
cars
cars$dist_ZScore <- (dist - mean(dist))/sd(dist)
cars
DxS_ZScore <- Speed_ZScore * dist_ZScore
DxS_ZScore <- cars$Speed_ZScore * cars$dist_ZScore
cars
cars$DxS_ZScore <- cars$Speed_ZScore * cars$dist_ZScore
cars
Total = sum(Cars$DxS_ZScore)
Total = sum(DxS_ZScore)
cor1 <- Total/n-1
cor1 <- Total/c(speed)-1
cor1
cor1 <- Total/50-1
cor1
cor1 <- Total/nrow(speed)-1
cor1
cor1 <- Total/nrow(cars)-1
cor1
cor(speed, dist)
cor.test(speed, dist)
cor(Speed_ZScore, dist_ZScore)
cor(cars$Speed_ZScore, cars$dist_ZScore)
cor.test(cars$Speed_ZScore, cars$dist_ZScore)
cor1 <- Total/(nrow(cars)-1)
cor1
cars$speedRank = rank(speed)
cars$distRank = rank(dist)
cars
cars$SR_ZScore <- (speedRank - mean(speedRank))/sd(speedRank)
cars$SR_ZScore <- (cars$speedRank - mean(cars$speedRank))/sd(cars$speedRank)
cars$DR_ZScore <- (cars$distRank - mean(cars$distRank))/sd(cars$distRank)
cars
cars$SRxDR = cars$SR_ZScore * cars$DR_ZScore
TRank = sum(cars$SRxDR)
cor2 = TRank/(nrow(speed)-1)
cor2
cor2 = TRank/(nrow(cars)-1)
cor2
cor(speedRank, distRank)
cor(cars$speedRank, cars$distRank)
cor(cars$speedRank, cars$distRank, method = "spearman")
cor.test(cars$speedRank, cars$distRank, method = "spearman")
diabetes_file = read.csv("diabetes.csv", header = TRUE)
diabetes_file = read.csv("diabetes.csv", header = TRUE)
diabetes_file
summary(diabetes_file)
attach(diabetes_file)
hist(Insulin)
plot(Insulin)
boxplot(Insulin)
?boxplot
sd(Insulin)
mean(Insulin)
qqplot(Insulin)
qqnorm(Insulin)
qqline(Insulin)
#deleting or discarding the pregnancies column
diabetes_file = subset(diabetes_file, select = -c(Pregnancies))
diabetes_file
head(diabetes_file)
# Create a sample table
my_table <- data.frame(id = c(1, 2, 3), value1 = c(0, 5, 0), value2 = c(2, 0, 4))
# Replace 0s with NaNs in all columns but "id"
my_table[, -1] <- apply(my_table[, -1], 2, function(x) ifelse(x == 0, NaN, x))
# View the updated table
my_table
# Replace 0s with NaNs in all columns but "id"
my_table[, -2] <- apply(my_table[, -2], 2, function(x) ifelse(x == 0, NaN, x))
# Create a sample table
my_table <- data.frame(id = c(1, 2, 3), value1 = c(0, 5, 0), value2 = c(2, 0, 4))
# Replace 0s with NaNs in all columns but "id"
my_table[, -2] <- apply(my_table[, -2], 2, function(x) ifelse(x == 0, NaN, x))
# View the updated table
my_table
#Changing all 0 entries to NAN in each column
Glucose = ifelse(Glucose == 0, NaN, Glucose)
BloodPressure = ifelse(BloodPressure == 0, NaN, BloodPressure)
SkinThickness = ifelse(SkinThickness == 0, NaN, SkinThickness)
Insulin = ifelse(Insulin == 0, NaN, Insulin)
BMI = ifelse(BMI == 0, NaN, BMI)
DiabetesPedigreeFunction = ifelse(DiabetesPedigreeFunction, NaN, DiabetesPedigreeFunction)
DiabetesPedigreeFunction = ifelse(DiabetesPedigreeFunction == 0, NaN, DiabetesPedigreeFunction)
Age = ifelse(Age == 0, NaN, Age)
diabetes_file
#Changing all 0 entries to NAN in each column
Glucose = ifelse(Glucose == 0, NaN, Glucose)
Glucose
Insulin = ifelse(Insulin == 0, NaN, Insulin)
Insulin
diabetes_file
diabetes_file$Insulin = ifelse(diabetes_file$Insulin == 0, NaN, diabetes_file$Insulin)
diabetes_file$SkinThickness = ifelse(diabetes_file$SkinThickness == 0, NaN, diabetes_file$SkinThickness)
diabetes_file$BMI = ifelse(diabetes_file$BMI == 0, NaN, diabetes_file$BMI)
diabetes_file
Age
DiabetesPedigreeFunction
BloodPressure
#Changing all 0 entries to NAN in each column
diabetes_file$BloodPressure = ifelse(diabetes_file$BloodPressure == 0, NaN, diabetes_file$BloodPressure)
head(diabetes_file)
hist(Pregnancies)
library(ggplot2)
?ggplot()
summary(Pregnancies)
#Visualization of each variable with there suummary Statistics.
hist(BloodPressure)
summary(BloodPressure)
#Changing all 0 entries to NAN in each column
diabetes_file$Glucose = ifelse(diabetes_file$Glucose == 0, NaN, diabetes_file$Glucose)
diabetes_file$DiabetesPedigreeFunction = ifelse(diabetes_file$DiabetesPedigreeFunction == 0, NaN, diabetes_file$DiabetesPedigreeFunction)
head(diabetes_file)
hist(SkinThickness)
summary(SkinThickness)
hist(Insulin)
summary(Insulin)
hist(BMI)
summary(BMI)
hist(DiabetesPedigreeFunction)
plot(DiabetesPedigreeFunction)
Boxplot(DiabetesPedigreeFunction)
boxplot(DiabetesPedigreeFunction)
hist(diabetes_file$DiabetesPedigreeFunction)
summary(diabetes_file$DiabetesPedigreeFunction)
hist(Age)
summary(Age)
hist(diabetes_file)
hist(diabetes_file[diabetes_file])
hist(Outcome)
#Visualization of each variable with there suummary Statistics.
?par()
library(dplyr)
library(tidyverse)
#Carrying out KS test for normality
ks.test(Glucose, "pnorm", mean=mean(Glucose), sd = sd(Glucose))
#Carrying out KS test for normality
ks.test(diabetes_file$Glucose, "pnorm", mean=mean(diabetes_file$Glucose), sd = sd(diabetes_file$Glucose))
t.test(Glucose, "pnorm", mean=mean(Glucose), sd = sd(Glucose))
ks.test(Insulin, "pnorm", mean=mean(Insulin), sd = sd(Insulin))
diabetes_file = read.csv("diabetes.csv", header = TRUE)
diabetes_file
summary(diabetes_file)
attach(diabetes_file)
diabetes_file = read.csv("diabetes.csv", header = TRUE)
diabetes_file
summary(diabetes_file)
attach(diabetes_file)
#deleting or discarding the pregnancies column
diabetes_file = subset(diabetes_file, select = -c(Pregnancies))
head(diabetes_file)
diabetes_file$Glucose = ifelse(diabetes_file$Glucose == 0, NaN, diabetes_file$Glucose)
diabetes_file$BloodPressure = ifelse(diabetes_file$BloodPressure == 0, NaN, diabetes_file$BloodPressure)
diabetes_file$SkinThickness = ifelse(diabetes_file$SkinThickness == 0, NaN, diabetes_file$SkinThickness)
diabetes_file$Insulin = ifelse(diabetes_file$Insulin == 0, NaN, diabetes_file$Insulin)
diabetes_file$BMI = ifelse(diabetes_file$BMI == 0, NaN, diabetes_file$BMI)
diabetes_file$DiabetesPedigreeFunction = ifelse(diabetes_file$DiabetesPedigreeFunction == 0, NaN, diabetes_file$DiabetesPedigreeFunction)
diabetes_file$Age = ifelse(diabetes_file$Age == 0, NaN, diabetes_file$Age)
head(diabetes_file)
hist(Glucose)
summary(Glucose)
hist(BloodPressure)
summary(BloodPressure)
hist(SkinThickness)
summary(SkinThickness)
hist(Insulin)
summary(Insulin)
hist(BMI)
summary(BMI)
hist(diabetes_file$DiabetesPedigreeFunction)
summary(diabetes_file$DiabetesPedigreeFunction)
hist(Age)
summary(Age)
#Carrying out KS test for normality
ks.test(Glucose, "pnorm", mean=mean(Glucose), sd = sd(Glucose))
#Carrying out KS test for normality
is.na(diabetes_file)
#Carrying out KS test for normality
boxplot(Glucose)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(1, 7))
hist(Glucose)
hist(Glucose)
hist(Glucose)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(1,7))
hist(Glucose)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(1,3))
hist(Glucose)
hist(BloodPressure)
hist(SkinThickness)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(2,7))
hist(Glucose)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(3,7))
hist(Glucose)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(3,6))
hist(Glucose)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(2,6))
hist(Glucose)
hist(BloodPressure)
hist(SkinThickness)
hist(Insulin)
hist(BMI)
hist(diabetes_file$DiabetesPedigreeFunction)
hist(Age)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(1,6))
hist(Glucose)
hist(BloodPressure)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(2,4))
hist(Glucose)
hist(BloodPressure)
hist(SkinThickness)
hist(Insulin)
hist(BMI)
hist(diabetes_file$DiabetesPedigreeFunction)
hist(Age)
diabetes_file = read.csv("diabetes.csv", header = TRUE)
diabetes_file
summary(diabetes_file)
attach(diabetes_file)
#deleting or discarding the pregnancies column
diabetes_file = subset(diabetes_file, select = -c(Pregnancies))
head(diabetes_file)
#Changing all 0 entries to NAN in each column
diabetes_file$Glucose = ifelse(diabetes_file$Glucose == 0, NaN, diabetes_file$Glucose)
diabetes_file$BloodPressure = ifelse(diabetes_file$BloodPressure == 0, NaN, diabetes_file$BloodPressure)
diabetes_file$SkinThickness = ifelse(diabetes_file$SkinThickness == 0, NaN, diabetes_file$SkinThickness)
diabetes_file$Insulin = ifelse(diabetes_file$Insulin == 0, NaN, diabetes_file$Insulin)
diabetes_file$BMI = ifelse(diabetes_file$BMI == 0, NaN, diabetes_file$BMI)
diabetes_file$DiabetesPedigreeFunction = ifelse(diabetes_file$DiabetesPedigreeFunction == 0, NaN, diabetes_file$DiabetesPedigreeFunction)
diabetes_file$Age = ifelse(diabetes_file$Age == 0, NaN, diabetes_file$Age)
head(diabetes_file)
hist(Glucose)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(2,4))
hist(Glucose)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(3,3))
hist(Glucose)
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(2,4))
hist(Glucose)
hist(BloodPressure)
hist(SkinThickness)
hist(Insulin)
hist(BMI)
hist(DiabetesPedigreeFunction)
hist(daibetes_file$DiabetesPedigreeFunction)
hist(diabetes_file$DiabetesPedigreeFunction)
hist(Age)
diabetes_file = read.csv("diabetes.csv", header = TRUE)
library(dplyr)
library("tidyr")
library("dplyr")
#deleting or discarding the pregnancies column
diabetes_file = subset(diabetes_file, select = -c(Pregnancies))
diabetes_file
#Changing all 0 entries to NA in each column
diabetes_file = diabetes_file %>%
mutate_at(c('Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'), ~replace_na(.,0))
diabetes_file
#Changing all 0 entries to NA in each column
diabetes_file = diabetes_file %>%
mutate_at(c(Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age), ~replace_na(.,0))
attach(diabetes_file)
detach(diabetes_file)
attach(diabetes_file)
detach(diabetes_file)
attach(diabetes_file)
#Changing all 0 entries to NA in each column
diabetes_file2 = diabetes_file %>%
mutate_at(c(Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age), ~replace_na(.,0))
#Changing all 0 entries to NA in each column
diabetes_file2 = diabetes_file %>%
mutate_at(c('Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'), ~replace_na(.,0))
diabetes_file
#Changing all 0 entries to NA in each column
diabetes_file = diabetes_file %>%
mutate_at(c('Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'), ~na_if(.,0))
diabetes_file
#Changing all 0 entries to NA in each column
diabetes_file = diabetes_file %>%
mutate_at(c('Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'), ~NaN(.,0))
#Visualization of each variable with there suummary Statistics.
par(mfrow = c(2,4))
?glm
exp(coefficients(Reg_diab))
#Question F
Reg_diab <- glm(Outcome~(.),family = binomial, data = diabetes_file)
summary(Reg_diab)
exp(coefficients(Reg_diab))
exp(confint(Reg_diab))
#Question F
#Using simple linear regression model
simple_diab <- lm(Glucose ~ Age)
simple_diab
null_data <- diabetes_file %>%
filter(is.na(Glucose))
library("dplyr")
library("tidyr")
null_data <- diabetes_file %>%
filter(is.na(Glucose))
predict(simple_diab, newdata = null_data)
plot(Glucose, outcome)
